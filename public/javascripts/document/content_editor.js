// Generated by CoffeeScript 1.6.3
(function() {
  var DocumentContentEditor,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  DocumentContentEditor = (function() {
    function DocumentContentEditor($place, parser) {
      var self;
      this.$place = $place;
      this.parser = parser;
      this.onSourceChange = __bind(this.onSourceChange, this);
      this.saveToFile = __bind(this.saveToFile, this);
      self = this;
      this.document = null;
      this.cm = CodeMirror($('.source-editor-wrap', this.$place)[0], {
        mode: 'russia_dialect',
        lineWrapping: true,
        lineNumbers: true
      });
      this.$toolbar = $('.toolbar', this.$place);
      this.$log_wrap = $('.log-wrap', this.$place);
      this.$log_list = $('.log-table>tbody', this.log_wrap);
      if (window.File && window.FileReader && window.FileList && window.Blob) {
        this.__initFileUploader();
      }
      this.__initToolbar();
      this.cm.on('change', this.onSourceChange);
      this.$log_list.on('click', 'tr', function() {
        var $this, ch, line;
        $this = $(this);
        line = parseInt($this.attr('data-line'));
        ch = parseInt($this.attr('data-ch'));
        self.setCursor(line, ch);
        self.cm.focus();
        return false;
      });
    }

    DocumentContentEditor.prototype.__initFileUploader = function() {
      var self;
      self = this;
      $('button[name=load]', this.$toolbar).show();
      return $('input:file[name="source-loader"]', this.$place).change(function() {
        var file, reader;
        file = this.files[0];
        reader = new FileReader();
        reader.onload = function() {
          return self.setSource(reader.result);
        };
        return reader.readAsText(file, 'cp1251');
      });
    };

    DocumentContentEditor.prototype.__initToolbar = function() {
      var _this = this;
      $('[name=load]', this.$toolbar).click(function() {
        return $('input:file[name="source-loader"]', _this.$place).click();
      });
      $('[name=save]', this.$toolbar).click(this.saveToFile);
      return $('[name=align]', this.$toolbar).click(function() {
        return alert("Doesn't implemented");
      });
    };

    DocumentContentEditor.prototype.saveToFile = function() {
      var $dl, blob, url;
      blob = new Blob([this.getSource()], {
        type: 'text/plain'
      });
      url = window.URL.createObjectURL(blob);
      $dl = $('<a>').attr('href', url);
      $dl.appendTo('body').text('click');
      return console.log($dl);
    };

    DocumentContentEditor.prototype.setSource = function(src) {
      return this.cm.setValue(src);
    };

    DocumentContentEditor.prototype.getSource = function() {
      return this.cm.getValue();
    };

    DocumentContentEditor.prototype.setCursor = function(line, ch) {
      var d;
      d = this.cm.getDoc();
      return d.setCursor(line, ch, true);
    };

    DocumentContentEditor.prototype.setDocument = function(document) {
      this.document = document;
    };

    DocumentContentEditor.prototype.onSourceChange = function() {
      var data;
      data = this.parser.parse(this.cm.getValue(), this.document);
      if (data.log != null) {
        this.updateLog(data.log);
      }
      if (data.content != null) {
        return this.document.setContent(data.content);
      }
    };

    DocumentContentEditor.prototype.updateLog = function(log) {
      var m, _i, _len, _ref, _results;
      this.$log_list.empty();
      if (!log.messages.length) {
        return this.$log_wrap.hide();
      }
      this.$log_wrap.show();
      _ref = log.messages;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        _results.push(this.$log_list.append(JST['templates/doc/log_row'](m)));
      }
      return _results;
    };

    return DocumentContentEditor;

  })();

  window.DocumentContentEditor = DocumentContentEditor;

}).call(this);
